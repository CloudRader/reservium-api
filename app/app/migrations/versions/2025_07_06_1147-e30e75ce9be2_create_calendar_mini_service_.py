"""create calendar mini service association table

Revision ID: e30e75ce9be2
Revises: ea3c9c7b12fe
Create Date: 2025-07-06 11:47:07.799992

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "e30e75ce9be2"
down_revision: Union[str, None] = "ea3c9c7b12fe"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "calendar_mini_service_association",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("calendar_id", sa.String(), nullable=False),
        sa.Column("mini_service_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["calendar_id"],
            ["calendar.id"],
        ),
        sa.ForeignKeyConstraint(
            ["mini_service_id"],
            ["mini_service.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "calendar_id", "mini_service_id", name="idx_uq_calendar_mini_service"
        ),
    )
    op.drop_column("calendar", "mini_services")
    op.alter_column(
        "mini_service",
        "lockers_id",
        existing_type=postgresql.ARRAY(sa.INTEGER()),
        nullable=False,
    )
    op.drop_constraint(
        op.f("mini_service_access_group_key"), "mini_service", type_="unique"
    )
    op.create_unique_constraint(
        "uq_mini_service_access_group", "mini_service", ["access_group"]
    )
    op.alter_column(
        "reservation_service",
        "lockers_id",
        existing_type=postgresql.ARRAY(sa.INTEGER()),
        nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "reservation_service",
        "lockers_id",
        existing_type=postgresql.ARRAY(sa.INTEGER()),
        nullable=True,
    )
    op.drop_constraint("uq_mini_service_access_group", "mini_service", type_="unique")
    op.create_unique_constraint(
        op.f("mini_service_access_group_key"),
        "mini_service",
        ["access_group"],
        postgresql_nulls_not_distinct=False,
    )
    op.alter_column(
        "mini_service",
        "lockers_id",
        existing_type=postgresql.ARRAY(sa.INTEGER()),
        nullable=True,
    )
    op.add_column(
        "calendar",
        sa.Column(
            "mini_services",
            postgresql.ARRAY(sa.VARCHAR()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_table("calendar_mini_service_association")
    # ### end Alembic commands ###
