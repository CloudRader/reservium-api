"""
Add tables

Revision ID: cf2235d58dcb
Revises:
Create Date: 2025-07-26 18:51:23.829707

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from core.models import RulesType
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "cf2235d58dcb"
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "reservation_service",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("alias", sa.String(), nullable=False),
        sa.Column("public", sa.Boolean(), nullable=False),
        sa.Column("web", sa.String(), nullable=True),
        sa.Column("contact_mail", sa.String(), nullable=False),
        sa.Column("access_group", sa.String(), nullable=True),
        sa.Column("room_id", sa.Integer(), nullable=True),
        sa.Column("lockers_id", postgresql.ARRAY(sa.Integer()), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_reservation_service")),
        sa.UniqueConstraint("alias", name=op.f("uq_reservation_service_alias")),
        sa.UniqueConstraint("name", name=op.f("uq_reservation_service_name")),
    )
    op.create_table(
        "user",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("full_name", sa.String(), nullable=False),
        sa.Column("room_number", sa.String(), nullable=False),
        sa.Column("active_member", sa.Boolean(), nullable=False),
        sa.Column("section_head", sa.Boolean(), nullable=False),
        sa.Column("roles", postgresql.ARRAY(sa.String()), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user")),
        sa.UniqueConstraint("username", name=op.f("uq_user_username")),
    )
    op.create_table(
        "calendar",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("reservation_type", sa.String(), nullable=False),
        sa.Column("color", sa.String(), nullable=False),
        sa.Column("max_people", sa.Integer(), nullable=False),
        sa.Column("more_than_max_people_with_permission", sa.Boolean(), nullable=False),
        sa.Column("collision_with_itself", sa.Boolean(), nullable=False),
        sa.Column(
            "collision_with_calendar",
            postgresql.ARRAY(sa.String()),
            nullable=True,
        ),
        sa.Column("club_member_rules", RulesType(length=sa.TEXT()), nullable=True),
        sa.Column("active_member_rules", RulesType(length=sa.TEXT()), nullable=False),
        sa.Column("manager_rules", RulesType(length=sa.TEXT()), nullable=False),
        sa.Column("reservation_service_id", sa.UUID(), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["reservation_service_id"],
            ["reservation_service.id"],
            name=op.f("fk_calendar_reservation_service_id_reservation_service"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_calendar")),
        sa.UniqueConstraint(
            "reservation_type",
            name=op.f("uq_calendar_reservation_type"),
        ),
    )
    op.create_table(
        "mini_service",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("access_group", sa.String(), nullable=True),
        sa.Column("room_id", sa.Integer(), nullable=True),
        sa.Column("reservation_service_id", sa.UUID(), nullable=False),
        sa.Column("lockers_id", postgresql.ARRAY(sa.Integer()), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["reservation_service_id"],
            ["reservation_service.id"],
            name=op.f("fk_mini_service_reservation_service_id_reservation_service"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_mini_service")),
    )
    op.create_table(
        "calendar_mini_service_association",
        sa.Column("calendar_id", sa.String(), nullable=False),
        sa.Column("mini_service_id", sa.UUID(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["calendar_id"],
            ["calendar.id"],
            name=op.f("fk_calendar_mini_service_association_calendar_id_calendar"),
        ),
        sa.ForeignKeyConstraint(
            ["mini_service_id"],
            ["mini_service.id"],
            name=op.f(
                "fk_calendar_mini_service_association_mini_service_id_mini_service",
            ),
        ),
        sa.PrimaryKeyConstraint(
            "id",
            name=op.f("pk_calendar_mini_service_association"),
        ),
        sa.UniqueConstraint(
            "calendar_id",
            "mini_service_id",
            name=op.f(
                "uq_calendar_mini_service_association_calendar_id_mini_service_id",
            ),
        ),
    )
    op.create_table(
        "event",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("purpose", sa.String(), nullable=False),
        sa.Column("guests", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("start_datetime", sa.DateTime(), nullable=False),
        sa.Column("end_datetime", sa.DateTime(), nullable=False),
        sa.Column(
            "event_state",
            sa.Enum(
                "NOT_APPROVED",
                "UPDATE_REQUESTED",
                "CONFIRMED",
                "CANCELED",
                name="event_state_enum",
            ),
            server_default=sa.text("'NOT_APPROVED'"),
            nullable=False,
        ),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("calendar_id", sa.String(), nullable=False),
        sa.Column("additional_services", postgresql.ARRAY(sa.String()), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["calendar_id"],
            ["calendar.id"],
            name=op.f("fk_event_calendar_id_calendar"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
            name=op.f("fk_event_user_id_user"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_event")),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("event")
    op.drop_table("calendar_mini_service_association")
    op.drop_table("mini_service")
    op.drop_table("calendar")
    op.drop_table("user")
    op.drop_table("reservation_service")
    # ### end Alembic commands ###
